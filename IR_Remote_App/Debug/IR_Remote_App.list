
IR_Remote_App.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000b2c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000000  08000cc0  08000cc8  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  3 .ARM.extab    00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  4 .ARM          00000000  08000cc0  08000cc0  00010cc8  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000cc0  08000cc8  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000cc0  08000cc0  00010cc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000cc4  08000cc4  00010cc4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010cc8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b8  20000000  08000cc8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000b8  08000cc8  000200b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00010cc8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000117f  00000000  00000000  00010cf8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000006d6  00000000  00000000  00011e77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000220  00000000  00000000  00012550  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000001a8  00000000  00000000  00012770  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0000110c  00000000  00000000  00012918  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00000e48  00000000  00000000  00013a24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00004684  00000000  00000000  0001486c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00018ef0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000006ac  00000000  00000000  00018f44  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000000 	.word	0x20000000
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08000ca8 	.word	0x08000ca8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000004 	.word	0x20000004
 80001d0:	08000ca8 	.word	0x08000ca8

080001d4 <EXTI_voidEnableEXTI>:


static void (* EXTI0_CallBack) (void) = NULL ;

void EXTI_voidEnableEXTI 	(EXTI_LINE_t Copy_etLineNumber)
{
 80001d4:	b480      	push	{r7}
 80001d6:	b083      	sub	sp, #12
 80001d8:	af00      	add	r7, sp, #0
 80001da:	4603      	mov	r3, r0
 80001dc:	71fb      	strb	r3, [r7, #7]
	SET_BIT(EXTI->IMR ,Copy_etLineNumber );
 80001de:	4b08      	ldr	r3, [pc, #32]	; (8000200 <EXTI_voidEnableEXTI+0x2c>)
 80001e0:	681b      	ldr	r3, [r3, #0]
 80001e2:	79fa      	ldrb	r2, [r7, #7]
 80001e4:	2101      	movs	r1, #1
 80001e6:	fa01 f202 	lsl.w	r2, r1, r2
 80001ea:	4611      	mov	r1, r2
 80001ec:	4a04      	ldr	r2, [pc, #16]	; (8000200 <EXTI_voidEnableEXTI+0x2c>)
 80001ee:	430b      	orrs	r3, r1
 80001f0:	6013      	str	r3, [r2, #0]
}
 80001f2:	bf00      	nop
 80001f4:	370c      	adds	r7, #12
 80001f6:	46bd      	mov	sp, r7
 80001f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80001fc:	4770      	bx	lr
 80001fe:	bf00      	nop
 8000200:	40013c00 	.word	0x40013c00

08000204 <EXTI_voidSetTriggerSource>:
	CLR_BIT(EXTI->IMR ,Copy_etLineNumber );

}

void EXTI_voidSetTriggerSource (EXTI_LINE_t Copy_etLineNumber ,EXTI_TRIG_t Copy_etTriggerSource )
{
 8000204:	b480      	push	{r7}
 8000206:	b083      	sub	sp, #12
 8000208:	af00      	add	r7, sp, #0
 800020a:	4603      	mov	r3, r0
 800020c:	460a      	mov	r2, r1
 800020e:	71fb      	strb	r3, [r7, #7]
 8000210:	4613      	mov	r3, r2
 8000212:	71bb      	strb	r3, [r7, #6]

	switch(Copy_etTriggerSource)
 8000214:	79bb      	ldrb	r3, [r7, #6]
 8000216:	2b02      	cmp	r3, #2
 8000218:	d01c      	beq.n	8000254 <EXTI_voidSetTriggerSource+0x50>
 800021a:	2b02      	cmp	r3, #2
 800021c:	dc2f      	bgt.n	800027e <EXTI_voidSetTriggerSource+0x7a>
 800021e:	2b00      	cmp	r3, #0
 8000220:	d002      	beq.n	8000228 <EXTI_voidSetTriggerSource+0x24>
 8000222:	2b01      	cmp	r3, #1
 8000224:	d00b      	beq.n	800023e <EXTI_voidSetTriggerSource+0x3a>
	{
	case	EXTI_RISING_EDGE	:	SET_BIT(EXTI -> RTSR , Copy_etLineNumber);	break;
	case	EXTI_FALLING_EDGE	:	SET_BIT(EXTI -> FTSR , Copy_etLineNumber);	break;
	case	EXTI_ON_CHANGE		:	SET_BIT(EXTI -> RTSR , Copy_etLineNumber);
									SET_BIT(EXTI -> FTSR , Copy_etLineNumber);	break;
	default: break;
 8000226:	e02a      	b.n	800027e <EXTI_voidSetTriggerSource+0x7a>
	case	EXTI_RISING_EDGE	:	SET_BIT(EXTI -> RTSR , Copy_etLineNumber);	break;
 8000228:	4b1d      	ldr	r3, [pc, #116]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 800022a:	689b      	ldr	r3, [r3, #8]
 800022c:	79fa      	ldrb	r2, [r7, #7]
 800022e:	2101      	movs	r1, #1
 8000230:	fa01 f202 	lsl.w	r2, r1, r2
 8000234:	4611      	mov	r1, r2
 8000236:	4a1a      	ldr	r2, [pc, #104]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000238:	430b      	orrs	r3, r1
 800023a:	6093      	str	r3, [r2, #8]
 800023c:	e020      	b.n	8000280 <EXTI_voidSetTriggerSource+0x7c>
	case	EXTI_FALLING_EDGE	:	SET_BIT(EXTI -> FTSR , Copy_etLineNumber);	break;
 800023e:	4b18      	ldr	r3, [pc, #96]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000240:	68db      	ldr	r3, [r3, #12]
 8000242:	79fa      	ldrb	r2, [r7, #7]
 8000244:	2101      	movs	r1, #1
 8000246:	fa01 f202 	lsl.w	r2, r1, r2
 800024a:	4611      	mov	r1, r2
 800024c:	4a14      	ldr	r2, [pc, #80]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 800024e:	430b      	orrs	r3, r1
 8000250:	60d3      	str	r3, [r2, #12]
 8000252:	e015      	b.n	8000280 <EXTI_voidSetTriggerSource+0x7c>
	case	EXTI_ON_CHANGE		:	SET_BIT(EXTI -> RTSR , Copy_etLineNumber);
 8000254:	4b12      	ldr	r3, [pc, #72]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000256:	689b      	ldr	r3, [r3, #8]
 8000258:	79fa      	ldrb	r2, [r7, #7]
 800025a:	2101      	movs	r1, #1
 800025c:	fa01 f202 	lsl.w	r2, r1, r2
 8000260:	4611      	mov	r1, r2
 8000262:	4a0f      	ldr	r2, [pc, #60]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000264:	430b      	orrs	r3, r1
 8000266:	6093      	str	r3, [r2, #8]
									SET_BIT(EXTI -> FTSR , Copy_etLineNumber);	break;
 8000268:	4b0d      	ldr	r3, [pc, #52]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 800026a:	68db      	ldr	r3, [r3, #12]
 800026c:	79fa      	ldrb	r2, [r7, #7]
 800026e:	2101      	movs	r1, #1
 8000270:	fa01 f202 	lsl.w	r2, r1, r2
 8000274:	4611      	mov	r1, r2
 8000276:	4a0a      	ldr	r2, [pc, #40]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000278:	430b      	orrs	r3, r1
 800027a:	60d3      	str	r3, [r2, #12]
 800027c:	e000      	b.n	8000280 <EXTI_voidSetTriggerSource+0x7c>
	default: break;
 800027e:	bf00      	nop
	}

	SET_BIT(EXTI -> IMR , Copy_etLineNumber);
 8000280:	4b07      	ldr	r3, [pc, #28]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000282:	681b      	ldr	r3, [r3, #0]
 8000284:	79fa      	ldrb	r2, [r7, #7]
 8000286:	2101      	movs	r1, #1
 8000288:	fa01 f202 	lsl.w	r2, r1, r2
 800028c:	4611      	mov	r1, r2
 800028e:	4a04      	ldr	r2, [pc, #16]	; (80002a0 <EXTI_voidSetTriggerSource+0x9c>)
 8000290:	430b      	orrs	r3, r1
 8000292:	6013      	str	r3, [r2, #0]
}
 8000294:	bf00      	nop
 8000296:	370c      	adds	r7, #12
 8000298:	46bd      	mov	sp, r7
 800029a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800029e:	4770      	bx	lr
 80002a0:	40013c00 	.word	0x40013c00

080002a4 <EXTI_voidExtiConfig>:
	SET_BIT(EXTI -> SWIER , Copy_etLineNumber);

}

void EXTI_voidExtiConfig (EXTI_LINE_t Copy_etLineNumber ,EXTI_PORT_t Copy_etPortNumber )
{
 80002a4:	b480      	push	{r7}
 80002a6:	b083      	sub	sp, #12
 80002a8:	af00      	add	r7, sp, #0
 80002aa:	4603      	mov	r3, r0
 80002ac:	460a      	mov	r2, r1
 80002ae:	71fb      	strb	r3, [r7, #7]
 80002b0:	4613      	mov	r3, r2
 80002b2:	71bb      	strb	r3, [r7, #6]
	switch(Copy_etLineNumber)
 80002b4:	79fb      	ldrb	r3, [r7, #7]
 80002b6:	2b04      	cmp	r3, #4
 80002b8:	d846      	bhi.n	8000348 <EXTI_voidExtiConfig+0xa4>
 80002ba:	a201      	add	r2, pc, #4	; (adr r2, 80002c0 <EXTI_voidExtiConfig+0x1c>)
 80002bc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80002c0:	080002d5 	.word	0x080002d5
 80002c4:	080002ef 	.word	0x080002ef
 80002c8:	0800030d 	.word	0x0800030d
 80002cc:	08000349 	.word	0x08000349
 80002d0:	0800032b 	.word	0x0800032b
	{
	case EXTI_LINE_0 :  SYSCFG_EXTICR1 &= EXTI_CONFIG_MASK_1;
 80002d4:	4b20      	ldr	r3, [pc, #128]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002d6:	681b      	ldr	r3, [r3, #0]
 80002d8:	4a1f      	ldr	r2, [pc, #124]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002da:	f023 030f 	bic.w	r3, r3, #15
 80002de:	6013      	str	r3, [r2, #0]
						SYSCFG_EXTICR1 |= Copy_etPortNumber ;
 80002e0:	4b1d      	ldr	r3, [pc, #116]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002e2:	681a      	ldr	r2, [r3, #0]
 80002e4:	79bb      	ldrb	r3, [r7, #6]
 80002e6:	491c      	ldr	r1, [pc, #112]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002e8:	4313      	orrs	r3, r2
 80002ea:	600b      	str	r3, [r1, #0]
						break;
 80002ec:	e02d      	b.n	800034a <EXTI_voidExtiConfig+0xa6>

	case EXTI_LINE_1 :  SYSCFG_EXTICR1 &= EXTI_CONFIG_MASK_2;
 80002ee:	4b1a      	ldr	r3, [pc, #104]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002f0:	681b      	ldr	r3, [r3, #0]
 80002f2:	4a19      	ldr	r2, [pc, #100]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002f4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80002f8:	6013      	str	r3, [r2, #0]
						SYSCFG_EXTICR1 |= (Copy_etPortNumber <<4) ;
 80002fa:	4b17      	ldr	r3, [pc, #92]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	79ba      	ldrb	r2, [r7, #6]
 8000300:	0112      	lsls	r2, r2, #4
 8000302:	4611      	mov	r1, r2
 8000304:	4a14      	ldr	r2, [pc, #80]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000306:	430b      	orrs	r3, r1
 8000308:	6013      	str	r3, [r2, #0]
						break;
 800030a:	e01e      	b.n	800034a <EXTI_voidExtiConfig+0xa6>

	case EXTI_LINE_2 :  SYSCFG_EXTICR1 &= EXTI_CONFIG_MASK_3;
 800030c:	4b12      	ldr	r3, [pc, #72]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 800030e:	681b      	ldr	r3, [r3, #0]
 8000310:	4a11      	ldr	r2, [pc, #68]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000312:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8000316:	6013      	str	r3, [r2, #0]
						SYSCFG_EXTICR1 |= (Copy_etPortNumber <<8) ;
 8000318:	4b0f      	ldr	r3, [pc, #60]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 800031a:	681b      	ldr	r3, [r3, #0]
 800031c:	79ba      	ldrb	r2, [r7, #6]
 800031e:	0212      	lsls	r2, r2, #8
 8000320:	4611      	mov	r1, r2
 8000322:	4a0d      	ldr	r2, [pc, #52]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000324:	430b      	orrs	r3, r1
 8000326:	6013      	str	r3, [r2, #0]
						break;
 8000328:	e00f      	b.n	800034a <EXTI_voidExtiConfig+0xa6>

	case EXTI_LINE_4 :  SYSCFG_EXTICR1 &= EXTI_CONFIG_MASK_4;
 800032a:	4b0b      	ldr	r3, [pc, #44]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 800032c:	681b      	ldr	r3, [r3, #0]
 800032e:	4a0a      	ldr	r2, [pc, #40]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000330:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8000334:	6013      	str	r3, [r2, #0]
						SYSCFG_EXTICR1 |= (Copy_etPortNumber <<12) ;
 8000336:	4b08      	ldr	r3, [pc, #32]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000338:	681b      	ldr	r3, [r3, #0]
 800033a:	79ba      	ldrb	r2, [r7, #6]
 800033c:	0312      	lsls	r2, r2, #12
 800033e:	4611      	mov	r1, r2
 8000340:	4a05      	ldr	r2, [pc, #20]	; (8000358 <EXTI_voidExtiConfig+0xb4>)
 8000342:	430b      	orrs	r3, r1
 8000344:	6013      	str	r3, [r2, #0]
						break;
 8000346:	e000      	b.n	800034a <EXTI_voidExtiConfig+0xa6>
	default: break;
 8000348:	bf00      	nop
	}


}
 800034a:	bf00      	nop
 800034c:	370c      	adds	r7, #12
 800034e:	46bd      	mov	sp, r7
 8000350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000354:	4770      	bx	lr
 8000356:	bf00      	nop
 8000358:	40013800 	.word	0x40013800

0800035c <EXTI_voidCallBackFunctionRegisteration>:

void EXTI_voidCallBackFunctionRegisteration (void (*ptr)(void))
{
 800035c:	b480      	push	{r7}
 800035e:	b083      	sub	sp, #12
 8000360:	af00      	add	r7, sp, #0
 8000362:	6078      	str	r0, [r7, #4]
	EXTI0_CallBack = ptr ;
 8000364:	4a04      	ldr	r2, [pc, #16]	; (8000378 <EXTI_voidCallBackFunctionRegisteration+0x1c>)
 8000366:	687b      	ldr	r3, [r7, #4]
 8000368:	6013      	str	r3, [r2, #0]
}
 800036a:	bf00      	nop
 800036c:	370c      	adds	r7, #12
 800036e:	46bd      	mov	sp, r7
 8000370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000374:	4770      	bx	lr
 8000376:	bf00      	nop
 8000378:	2000001c 	.word	0x2000001c

0800037c <EXTI0_IRQHandler>:

void EXTI0_IRQHandler(void)
{
 800037c:	b580      	push	{r7, lr}
 800037e:	af00      	add	r7, sp, #0
	// Calling the function @ main
	EXTI0_CallBack();
 8000380:	4b05      	ldr	r3, [pc, #20]	; (8000398 <EXTI0_IRQHandler+0x1c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	4798      	blx	r3

	/*	Clear pending Bit		*/
	SET_BIT(EXTI -> PR , 0);
 8000386:	4b05      	ldr	r3, [pc, #20]	; (800039c <EXTI0_IRQHandler+0x20>)
 8000388:	695b      	ldr	r3, [r3, #20]
 800038a:	4a04      	ldr	r2, [pc, #16]	; (800039c <EXTI0_IRQHandler+0x20>)
 800038c:	f043 0301 	orr.w	r3, r3, #1
 8000390:	6153      	str	r3, [r2, #20]
}
 8000392:	bf00      	nop
 8000394:	bd80      	pop	{r7, pc}
 8000396:	bf00      	nop
 8000398:	2000001c 	.word	0x2000001c
 800039c:	40013c00 	.word	0x40013c00

080003a0 <IR_voidInit>:
volatile u32 Arr_u32FramData [33]    ={0};	  //for Store Time for all bits frame
volatile u8 Gloabal_u8CounterForEdge = 0;	  //for Counting the bits data
volatile u8 Global_u8DataStorgeFrame = 0;	  //for Data in frame

void IR_voidInit(void)
{
 80003a0:	b580      	push	{r7, lr}
 80003a2:	af00      	add	r7, sp, #0
	/*Enable RCC GPIOA*/
	MRCC_voidEnablePeripheralClock(AHB1, MRCC_PERIPHERAL_EN_GPIOA);
 80003a4:	2100      	movs	r1, #0
 80003a6:	2000      	movs	r0, #0
 80003a8:	f000 fab2 	bl	8000910 <MRCC_voidEnablePeripheralClock>
	/*Enable RCC Systemgen*/
	MRCC_voidEnablePeripheralClock(APB2, MRCC_PERIPHERAL_EN_SYSTEMGEN);
 80003ac:	210e      	movs	r1, #14
 80003ae:	2003      	movs	r0, #3
 80003b0:	f000 faae 	bl	8000910 <MRCC_voidEnablePeripheralClock>

	/*Config pin interrupt 0  */
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN0, MGPIO_MODE_INPUT);
 80003b4:	2200      	movs	r2, #0
 80003b6:	2100      	movs	r1, #0
 80003b8:	2000      	movs	r0, #0
 80003ba:	f000 f8cd 	bl	8000558 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPullState(MGPIOA_PORT, MGPIO_PIN0,MGPIO_PULL_UP );
 80003be:	2201      	movs	r2, #1
 80003c0:	2100      	movs	r1, #0
 80003c2:	2000      	movs	r0, #0
 80003c4:	f000 f940 	bl	8000648 <MGPIO_voidSetPullState>

	/*Interrupt Setting 0 */
	EXTI_voidCallBackFunctionRegisteration(IR_voidGetFram);
 80003c8:	480a      	ldr	r0, [pc, #40]	; (80003f4 <IR_voidInit+0x54>)
 80003ca:	f7ff ffc7 	bl	800035c <EXTI_voidCallBackFunctionRegisteration>
	EXTI_voidExtiConfig(EXTI_LINE_0, EXTI_PORTA);
 80003ce:	2100      	movs	r1, #0
 80003d0:	2000      	movs	r0, #0
 80003d2:	f7ff ff67 	bl	80002a4 <EXTI_voidExtiConfig>
	EXTI_voidSetTriggerSource(EXTI_LINE_0, EXTI_FALLING_EDGE);
 80003d6:	2101      	movs	r1, #1
 80003d8:	2000      	movs	r0, #0
 80003da:	f7ff ff13 	bl	8000204 <EXTI_voidSetTriggerSource>
	EXTI_voidEnableEXTI(EXTI_LINE_0);
 80003de:	2000      	movs	r0, #0
 80003e0:	f7ff fef8 	bl	80001d4 <EXTI_voidEnableEXTI>

	/*Enable NVIC for EXTI0*/
	NVIC_voidEnableInterrupt(NVIC_ENABLE_EXTI0);
 80003e4:	2006      	movs	r0, #6
 80003e6:	f000 fa79 	bl	80008dc <NVIC_voidEnableInterrupt>

	/*Systick Timer Init */
	STK_voidInit();					/*Tick Timer = 0.5 Microsecond*/
 80003ea:	f000 faf9 	bl	80009e0 <STK_voidInit>
}
 80003ee:	bf00      	nop
 80003f0:	bd80      	pop	{r7, pc}
 80003f2:	bf00      	nop
 80003f4:	080003f9 	.word	0x080003f9

080003f8 <IR_voidGetFram>:



void IR_voidGetFram(void)
{
 80003f8:	b598      	push	{r3, r4, r7, lr}
 80003fa:	af00      	add	r7, sp, #0
	//	/*For Test EXTI is fooooool*/
	//		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_HIGH);

	/*For first falling edge*/
	if (Global_u8Flag == 0)
 80003fc:	4b15      	ldr	r3, [pc, #84]	; (8000454 <IR_voidGetFram+0x5c>)
 80003fe:	781b      	ldrb	r3, [r3, #0]
 8000400:	b2db      	uxtb	r3, r3
 8000402:	2b00      	cmp	r3, #0
 8000404:	d10b      	bne.n	800041e <IR_voidGetFram+0x26>
	{
		/*Start Timer*/
		STK_voidSetCallBackRegisteration(IR_voidTakeStart);
 8000406:	4814      	ldr	r0, [pc, #80]	; (8000458 <IR_voidGetFram+0x60>)
 8000408:	f000 fb40 	bl	8000a8c <STK_voidSetCallBackRegisteration>

		/* for Half second (For waiting until Frame is done) any time bus must is bigger than
		 * Timer of frame to avoid the Overflow
		 *  */
		STK_voidDisableTimerAndClear();
 800040c:	f000 faf8 	bl	8000a00 <STK_voidDisableTimerAndClear>
		STK_voidSetSingleInterval(1000000);
 8000410:	4812      	ldr	r0, [pc, #72]	; (800045c <IR_voidGetFram+0x64>)
 8000412:	f000 fb07 	bl	8000a24 <STK_voidSetSingleInterval>

		Global_u8Flag = 1;
 8000416:	4b0f      	ldr	r3, [pc, #60]	; (8000454 <IR_voidGetFram+0x5c>)
 8000418:	2201      	movs	r2, #1
 800041a:	701a      	strb	r2, [r3, #0]
		STK_voidSetSingleInterval(1000000);

		/*Increment counter for Frame Bits */
		Gloabal_u8CounterForEdge++;
	}
}
 800041c:	e018      	b.n	8000450 <IR_voidGetFram+0x58>
		Arr_u32FramData[Gloabal_u8CounterForEdge] = STK_u32GetElapsedTime();
 800041e:	4b10      	ldr	r3, [pc, #64]	; (8000460 <IR_voidGetFram+0x68>)
 8000420:	781b      	ldrb	r3, [r3, #0]
 8000422:	b2db      	uxtb	r3, r3
 8000424:	461c      	mov	r4, r3
 8000426:	f000 fb1d 	bl	8000a64 <STK_u32GetElapsedTime>
 800042a:	4603      	mov	r3, r0
 800042c:	4a0d      	ldr	r2, [pc, #52]	; (8000464 <IR_voidGetFram+0x6c>)
 800042e:	f842 3024 	str.w	r3, [r2, r4, lsl #2]
		STK_voidSetCallBackRegisteration(IR_voidTakeStart);
 8000432:	4809      	ldr	r0, [pc, #36]	; (8000458 <IR_voidGetFram+0x60>)
 8000434:	f000 fb2a 	bl	8000a8c <STK_voidSetCallBackRegisteration>
		STK_voidDisableTimerAndClear();
 8000438:	f000 fae2 	bl	8000a00 <STK_voidDisableTimerAndClear>
		STK_voidSetSingleInterval(1000000);
 800043c:	4807      	ldr	r0, [pc, #28]	; (800045c <IR_voidGetFram+0x64>)
 800043e:	f000 faf1 	bl	8000a24 <STK_voidSetSingleInterval>
		Gloabal_u8CounterForEdge++;
 8000442:	4b07      	ldr	r3, [pc, #28]	; (8000460 <IR_voidGetFram+0x68>)
 8000444:	781b      	ldrb	r3, [r3, #0]
 8000446:	b2db      	uxtb	r3, r3
 8000448:	3301      	adds	r3, #1
 800044a:	b2da      	uxtb	r2, r3
 800044c:	4b04      	ldr	r3, [pc, #16]	; (8000460 <IR_voidGetFram+0x68>)
 800044e:	701a      	strb	r2, [r3, #0]
}
 8000450:	bf00      	nop
 8000452:	bd98      	pop	{r3, r4, r7, pc}
 8000454:	20000024 	.word	0x20000024
 8000458:	08000469 	.word	0x08000469
 800045c:	000f4240 	.word	0x000f4240
 8000460:	200000ac 	.word	0x200000ac
 8000464:	20000028 	.word	0x20000028

08000468 <IR_voidTakeStart>:

void IR_voidTakeStart(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	b082      	sub	sp, #8
 800046c:	af00      	add	r7, sp, #0
	/*For sure the pressed only one time*/
	Global_u8DataStorgeFrame = 0;
 800046e:	4b2d      	ldr	r3, [pc, #180]	; (8000524 <IR_voidTakeStart+0xbc>)
 8000470:	2200      	movs	r2, #0
 8000472:	701a      	strb	r2, [r3, #0]

	/*Step 1 : Check is valid Frame -> start bit
	 *  	       13500 MicroSecond and I have Tick Time = 0.5s  than = 27000*/
	if (Arr_u32FramData[0] >= 20000 && Arr_u32FramData[0] <= 28000)
 8000474:	4b2c      	ldr	r3, [pc, #176]	; (8000528 <IR_voidTakeStart+0xc0>)
 8000476:	681b      	ldr	r3, [r3, #0]
 8000478:	f644 621f 	movw	r2, #19999	; 0x4e1f
 800047c:	4293      	cmp	r3, r2
 800047e:	d941      	bls.n	8000504 <IR_voidTakeStart+0x9c>
 8000480:	4b29      	ldr	r3, [pc, #164]	; (8000528 <IR_voidTakeStart+0xc0>)
 8000482:	681b      	ldr	r3, [r3, #0]
 8000484:	f646 5260 	movw	r2, #28000	; 0x6d60
 8000488:	4293      	cmp	r3, r2
 800048a:	d83b      	bhi.n	8000504 <IR_voidTakeStart+0x9c>
	{
		/*Collect 8 bit IR_DATA*/
		for (u8 Local_counter = 0 ; Local_counter <8  ; Local_counter++)
 800048c:	2300      	movs	r3, #0
 800048e:	71fb      	strb	r3, [r7, #7]
 8000490:	e032      	b.n	80004f8 <IR_voidTakeStart+0x90>
		{
			/*Write Logical Zero   TickTime = 2250  */
			if (Arr_u32FramData[17+Local_counter] >= 4000 && Arr_u32FramData[17+Local_counter] <= 4600)
 8000492:	79fb      	ldrb	r3, [r7, #7]
 8000494:	3311      	adds	r3, #17
 8000496:	4a24      	ldr	r2, [pc, #144]	; (8000528 <IR_voidTakeStart+0xc0>)
 8000498:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800049c:	f5b3 6f7a 	cmp.w	r3, #4000	; 0xfa0
 80004a0:	d317      	bcc.n	80004d2 <IR_voidTakeStart+0x6a>
 80004a2:	79fb      	ldrb	r3, [r7, #7]
 80004a4:	3311      	adds	r3, #17
 80004a6:	4a20      	ldr	r2, [pc, #128]	; (8000528 <IR_voidTakeStart+0xc0>)
 80004a8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80004ac:	f241 12f8 	movw	r2, #4600	; 0x11f8
 80004b0:	4293      	cmp	r3, r2
 80004b2:	d80e      	bhi.n	80004d2 <IR_voidTakeStart+0x6a>
			{
				SET_BIT(Global_u8DataStorgeFrame,Local_counter);
 80004b4:	79fb      	ldrb	r3, [r7, #7]
 80004b6:	2201      	movs	r2, #1
 80004b8:	fa02 f303 	lsl.w	r3, r2, r3
 80004bc:	b25a      	sxtb	r2, r3
 80004be:	4b19      	ldr	r3, [pc, #100]	; (8000524 <IR_voidTakeStart+0xbc>)
 80004c0:	781b      	ldrb	r3, [r3, #0]
 80004c2:	b2db      	uxtb	r3, r3
 80004c4:	b25b      	sxtb	r3, r3
 80004c6:	4313      	orrs	r3, r2
 80004c8:	b25b      	sxtb	r3, r3
 80004ca:	b2da      	uxtb	r2, r3
 80004cc:	4b15      	ldr	r3, [pc, #84]	; (8000524 <IR_voidTakeStart+0xbc>)
 80004ce:	701a      	strb	r2, [r3, #0]
 80004d0:	e00f      	b.n	80004f2 <IR_voidTakeStart+0x8a>
			}
			else
			{
				CLR_BIT(Global_u8DataStorgeFrame,Local_counter);
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2201      	movs	r2, #1
 80004d6:	fa02 f303 	lsl.w	r3, r2, r3
 80004da:	b25b      	sxtb	r3, r3
 80004dc:	43db      	mvns	r3, r3
 80004de:	b25a      	sxtb	r2, r3
 80004e0:	4b10      	ldr	r3, [pc, #64]	; (8000524 <IR_voidTakeStart+0xbc>)
 80004e2:	781b      	ldrb	r3, [r3, #0]
 80004e4:	b2db      	uxtb	r3, r3
 80004e6:	b25b      	sxtb	r3, r3
 80004e8:	4013      	ands	r3, r2
 80004ea:	b25b      	sxtb	r3, r3
 80004ec:	b2da      	uxtb	r2, r3
 80004ee:	4b0d      	ldr	r3, [pc, #52]	; (8000524 <IR_voidTakeStart+0xbc>)
 80004f0:	701a      	strb	r2, [r3, #0]
		for (u8 Local_counter = 0 ; Local_counter <8  ; Local_counter++)
 80004f2:	79fb      	ldrb	r3, [r7, #7]
 80004f4:	3301      	adds	r3, #1
 80004f6:	71fb      	strb	r3, [r7, #7]
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b07      	cmp	r3, #7
 80004fc:	d9c9      	bls.n	8000492 <IR_voidTakeStart+0x2a>
			}
		}
		IR_CommCallBack();
 80004fe:	4b0b      	ldr	r3, [pc, #44]	; (800052c <IR_voidTakeStart+0xc4>)
 8000500:	681b      	ldr	r3, [r3, #0]
 8000502:	4798      	blx	r3
		/*Invalid Frame*/
	}

	/*After Frame is finished restart all options again*/

	Global_u8Flag 			 = 0;
 8000504:	4b0a      	ldr	r3, [pc, #40]	; (8000530 <IR_voidTakeStart+0xc8>)
 8000506:	2200      	movs	r2, #0
 8000508:	701a      	strb	r2, [r3, #0]
	Gloabal_u8CounterForEdge = 0;
 800050a:	4b0a      	ldr	r3, [pc, #40]	; (8000534 <IR_voidTakeStart+0xcc>)
 800050c:	2200      	movs	r2, #0
 800050e:	701a      	strb	r2, [r3, #0]
	Arr_u32FramData[0] 		 = 0;
 8000510:	4b05      	ldr	r3, [pc, #20]	; (8000528 <IR_voidTakeStart+0xc0>)
 8000512:	2200      	movs	r2, #0
 8000514:	601a      	str	r2, [r3, #0]
	Global_u8DataStorgeFrame = 0;
 8000516:	4b03      	ldr	r3, [pc, #12]	; (8000524 <IR_voidTakeStart+0xbc>)
 8000518:	2200      	movs	r2, #0
 800051a:	701a      	strb	r2, [r3, #0]
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200000ad 	.word	0x200000ad
 8000528:	20000028 	.word	0x20000028
 800052c:	20000020 	.word	0x20000020
 8000530:	20000024 	.word	0x20000024
 8000534:	200000ac 	.word	0x200000ac

08000538 <IR_voidSetCallBack>:


void IR_voidSetCallBack(void (*FunctionCallBack_APP)(void))
{
 8000538:	b480      	push	{r7}
 800053a:	b083      	sub	sp, #12
 800053c:	af00      	add	r7, sp, #0
 800053e:	6078      	str	r0, [r7, #4]
	IR_CommCallBack = FunctionCallBack_APP;
 8000540:	4a04      	ldr	r2, [pc, #16]	; (8000554 <IR_voidSetCallBack+0x1c>)
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	6013      	str	r3, [r2, #0]
}
 8000546:	bf00      	nop
 8000548:	370c      	adds	r7, #12
 800054a:	46bd      	mov	sp, r7
 800054c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000550:	4770      	bx	lr
 8000552:	bf00      	nop
 8000554:	20000020 	.word	0x20000020

08000558 <MGPIO_voidSetPinMode>:
#include "MGPIO_Private.h"
#include "MGPIO_Config.h"


void MGPIO_voidSetPinMode(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8Mode  )
{
 8000558:	b480      	push	{r7}
 800055a:	b083      	sub	sp, #12
 800055c:	af00      	add	r7, sp, #0
 800055e:	4603      	mov	r3, r0
 8000560:	71fb      	strb	r3, [r7, #7]
 8000562:	460b      	mov	r3, r1
 8000564:	71bb      	strb	r3, [r7, #6]
 8000566:	4613      	mov	r3, r2
 8000568:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b05      	cmp	r3, #5
 800056e:	d857      	bhi.n	8000620 <MGPIO_voidSetPinMode+0xc8>
 8000570:	a201      	add	r2, pc, #4	; (adr r2, 8000578 <MGPIO_voidSetPinMode+0x20>)
 8000572:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000576:	bf00      	nop
 8000578:	08000591 	.word	0x08000591
 800057c:	080005a9 	.word	0x080005a9
 8000580:	080005c1 	.word	0x080005c1
 8000584:	080005d9 	.word	0x080005d9
 8000588:	080005f1 	.word	0x080005f1
 800058c:	08000609 	.word	0x08000609
	{
	case MGPIOA_PORT : MGPIOA->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000590:	4b27      	ldr	r3, [pc, #156]	; (8000630 <MGPIO_voidSetPinMode+0xd8>)
 8000592:	681b      	ldr	r3, [r3, #0]
 8000594:	7979      	ldrb	r1, [r7, #5]
 8000596:	79ba      	ldrb	r2, [r7, #6]
 8000598:	0052      	lsls	r2, r2, #1
 800059a:	fa01 f202 	lsl.w	r2, r1, r2
 800059e:	4611      	mov	r1, r2
 80005a0:	4a23      	ldr	r2, [pc, #140]	; (8000630 <MGPIO_voidSetPinMode+0xd8>)
 80005a2:	430b      	orrs	r3, r1
 80005a4:	6013      	str	r3, [r2, #0]
 80005a6:	e03c      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>
	case MGPIOB_PORT : MGPIOB->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005a8:	4b22      	ldr	r3, [pc, #136]	; (8000634 <MGPIO_voidSetPinMode+0xdc>)
 80005aa:	681b      	ldr	r3, [r3, #0]
 80005ac:	7979      	ldrb	r1, [r7, #5]
 80005ae:	79ba      	ldrb	r2, [r7, #6]
 80005b0:	0052      	lsls	r2, r2, #1
 80005b2:	fa01 f202 	lsl.w	r2, r1, r2
 80005b6:	4611      	mov	r1, r2
 80005b8:	4a1e      	ldr	r2, [pc, #120]	; (8000634 <MGPIO_voidSetPinMode+0xdc>)
 80005ba:	430b      	orrs	r3, r1
 80005bc:	6013      	str	r3, [r2, #0]
 80005be:	e030      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>
	case MGPIOC_PORT : MGPIOC->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <MGPIO_voidSetPinMode+0xe0>)
 80005c2:	681b      	ldr	r3, [r3, #0]
 80005c4:	7979      	ldrb	r1, [r7, #5]
 80005c6:	79ba      	ldrb	r2, [r7, #6]
 80005c8:	0052      	lsls	r2, r2, #1
 80005ca:	fa01 f202 	lsl.w	r2, r1, r2
 80005ce:	4611      	mov	r1, r2
 80005d0:	4a19      	ldr	r2, [pc, #100]	; (8000638 <MGPIO_voidSetPinMode+0xe0>)
 80005d2:	430b      	orrs	r3, r1
 80005d4:	6013      	str	r3, [r2, #0]
 80005d6:	e024      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>
	case MGPIOD_PORT : MGPIOD->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005d8:	4b18      	ldr	r3, [pc, #96]	; (800063c <MGPIO_voidSetPinMode+0xe4>)
 80005da:	681b      	ldr	r3, [r3, #0]
 80005dc:	7979      	ldrb	r1, [r7, #5]
 80005de:	79ba      	ldrb	r2, [r7, #6]
 80005e0:	0052      	lsls	r2, r2, #1
 80005e2:	fa01 f202 	lsl.w	r2, r1, r2
 80005e6:	4611      	mov	r1, r2
 80005e8:	4a14      	ldr	r2, [pc, #80]	; (800063c <MGPIO_voidSetPinMode+0xe4>)
 80005ea:	430b      	orrs	r3, r1
 80005ec:	6013      	str	r3, [r2, #0]
 80005ee:	e018      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>
	case MGPIOE_PORT : MGPIOE->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 80005f0:	4b13      	ldr	r3, [pc, #76]	; (8000640 <MGPIO_voidSetPinMode+0xe8>)
 80005f2:	681b      	ldr	r3, [r3, #0]
 80005f4:	7979      	ldrb	r1, [r7, #5]
 80005f6:	79ba      	ldrb	r2, [r7, #6]
 80005f8:	0052      	lsls	r2, r2, #1
 80005fa:	fa01 f202 	lsl.w	r2, r1, r2
 80005fe:	4611      	mov	r1, r2
 8000600:	4a0f      	ldr	r2, [pc, #60]	; (8000640 <MGPIO_voidSetPinMode+0xe8>)
 8000602:	430b      	orrs	r3, r1
 8000604:	6013      	str	r3, [r2, #0]
 8000606:	e00c      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>
	case MGPIOH_PORT : MGPIOH->MODER |= (u32)(Copy_u8Mode << (2U * Copy_u8PinNum ))  ; break ;
 8000608:	4b0e      	ldr	r3, [pc, #56]	; (8000644 <MGPIO_voidSetPinMode+0xec>)
 800060a:	681b      	ldr	r3, [r3, #0]
 800060c:	7979      	ldrb	r1, [r7, #5]
 800060e:	79ba      	ldrb	r2, [r7, #6]
 8000610:	0052      	lsls	r2, r2, #1
 8000612:	fa01 f202 	lsl.w	r2, r1, r2
 8000616:	4611      	mov	r1, r2
 8000618:	4a0a      	ldr	r2, [pc, #40]	; (8000644 <MGPIO_voidSetPinMode+0xec>)
 800061a:	430b      	orrs	r3, r1
 800061c:	6013      	str	r3, [r2, #0]
 800061e:	e000      	b.n	8000622 <MGPIO_voidSetPinMode+0xca>

	default :  /*Error*/   break ;
 8000620:	bf00      	nop
	}	
}
 8000622:	bf00      	nop
 8000624:	370c      	adds	r7, #12
 8000626:	46bd      	mov	sp, r7
 8000628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800062c:	4770      	bx	lr
 800062e:	bf00      	nop
 8000630:	40020000 	.word	0x40020000
 8000634:	40020400 	.word	0x40020400
 8000638:	40020800 	.word	0x40020800
 800063c:	40020c00 	.word	0x40020c00
 8000640:	40021000 	.word	0x40021000
 8000644:	40021c00 	.word	0x40021c00

08000648 <MGPIO_voidSetPullState>:
	}
}


void MGPIO_voidSetPullState(u8 Copy_u8PortName ,u8 Copy_u8PinNum ,u8 Copy_u8PullType  )
{
 8000648:	b480      	push	{r7}
 800064a:	b083      	sub	sp, #12
 800064c:	af00      	add	r7, sp, #0
 800064e:	4603      	mov	r3, r0
 8000650:	71fb      	strb	r3, [r7, #7]
 8000652:	460b      	mov	r3, r1
 8000654:	71bb      	strb	r3, [r7, #6]
 8000656:	4613      	mov	r3, r2
 8000658:	717b      	strb	r3, [r7, #5]
	switch(Copy_u8PortName)
 800065a:	79fb      	ldrb	r3, [r7, #7]
 800065c:	2b05      	cmp	r3, #5
 800065e:	d857      	bhi.n	8000710 <MGPIO_voidSetPullState+0xc8>
 8000660:	a201      	add	r2, pc, #4	; (adr r2, 8000668 <MGPIO_voidSetPullState+0x20>)
 8000662:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000666:	bf00      	nop
 8000668:	08000681 	.word	0x08000681
 800066c:	08000699 	.word	0x08000699
 8000670:	080006b1 	.word	0x080006b1
 8000674:	080006c9 	.word	0x080006c9
 8000678:	080006e1 	.word	0x080006e1
 800067c:	080006f9 	.word	0x080006f9
	{
	case MGPIOA_PORT : MGPIOA->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 8000680:	4b27      	ldr	r3, [pc, #156]	; (8000720 <MGPIO_voidSetPullState+0xd8>)
 8000682:	68db      	ldr	r3, [r3, #12]
 8000684:	7979      	ldrb	r1, [r7, #5]
 8000686:	79ba      	ldrb	r2, [r7, #6]
 8000688:	0052      	lsls	r2, r2, #1
 800068a:	fa01 f202 	lsl.w	r2, r1, r2
 800068e:	4611      	mov	r1, r2
 8000690:	4a23      	ldr	r2, [pc, #140]	; (8000720 <MGPIO_voidSetPullState+0xd8>)
 8000692:	430b      	orrs	r3, r1
 8000694:	60d3      	str	r3, [r2, #12]
 8000696:	e03c      	b.n	8000712 <MGPIO_voidSetPullState+0xca>
	case MGPIOB_PORT : MGPIOB->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 8000698:	4b22      	ldr	r3, [pc, #136]	; (8000724 <MGPIO_voidSetPullState+0xdc>)
 800069a:	68db      	ldr	r3, [r3, #12]
 800069c:	7979      	ldrb	r1, [r7, #5]
 800069e:	79ba      	ldrb	r2, [r7, #6]
 80006a0:	0052      	lsls	r2, r2, #1
 80006a2:	fa01 f202 	lsl.w	r2, r1, r2
 80006a6:	4611      	mov	r1, r2
 80006a8:	4a1e      	ldr	r2, [pc, #120]	; (8000724 <MGPIO_voidSetPullState+0xdc>)
 80006aa:	430b      	orrs	r3, r1
 80006ac:	60d3      	str	r3, [r2, #12]
 80006ae:	e030      	b.n	8000712 <MGPIO_voidSetPullState+0xca>
	case MGPIOC_PORT : MGPIOC->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 80006b0:	4b1d      	ldr	r3, [pc, #116]	; (8000728 <MGPIO_voidSetPullState+0xe0>)
 80006b2:	68db      	ldr	r3, [r3, #12]
 80006b4:	7979      	ldrb	r1, [r7, #5]
 80006b6:	79ba      	ldrb	r2, [r7, #6]
 80006b8:	0052      	lsls	r2, r2, #1
 80006ba:	fa01 f202 	lsl.w	r2, r1, r2
 80006be:	4611      	mov	r1, r2
 80006c0:	4a19      	ldr	r2, [pc, #100]	; (8000728 <MGPIO_voidSetPullState+0xe0>)
 80006c2:	430b      	orrs	r3, r1
 80006c4:	60d3      	str	r3, [r2, #12]
 80006c6:	e024      	b.n	8000712 <MGPIO_voidSetPullState+0xca>
	case MGPIOD_PORT : MGPIOD->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 80006c8:	4b18      	ldr	r3, [pc, #96]	; (800072c <MGPIO_voidSetPullState+0xe4>)
 80006ca:	68db      	ldr	r3, [r3, #12]
 80006cc:	7979      	ldrb	r1, [r7, #5]
 80006ce:	79ba      	ldrb	r2, [r7, #6]
 80006d0:	0052      	lsls	r2, r2, #1
 80006d2:	fa01 f202 	lsl.w	r2, r1, r2
 80006d6:	4611      	mov	r1, r2
 80006d8:	4a14      	ldr	r2, [pc, #80]	; (800072c <MGPIO_voidSetPullState+0xe4>)
 80006da:	430b      	orrs	r3, r1
 80006dc:	60d3      	str	r3, [r2, #12]
 80006de:	e018      	b.n	8000712 <MGPIO_voidSetPullState+0xca>
	case MGPIOE_PORT : MGPIOE->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 80006e0:	4b13      	ldr	r3, [pc, #76]	; (8000730 <MGPIO_voidSetPullState+0xe8>)
 80006e2:	68db      	ldr	r3, [r3, #12]
 80006e4:	7979      	ldrb	r1, [r7, #5]
 80006e6:	79ba      	ldrb	r2, [r7, #6]
 80006e8:	0052      	lsls	r2, r2, #1
 80006ea:	fa01 f202 	lsl.w	r2, r1, r2
 80006ee:	4611      	mov	r1, r2
 80006f0:	4a0f      	ldr	r2, [pc, #60]	; (8000730 <MGPIO_voidSetPullState+0xe8>)
 80006f2:	430b      	orrs	r3, r1
 80006f4:	60d3      	str	r3, [r2, #12]
 80006f6:	e00c      	b.n	8000712 <MGPIO_voidSetPullState+0xca>
	case MGPIOH_PORT : MGPIOH->PUPDR |= (u32)(Copy_u8PullType << (2U * Copy_u8PinNum ))  ; break ;
 80006f8:	4b0e      	ldr	r3, [pc, #56]	; (8000734 <MGPIO_voidSetPullState+0xec>)
 80006fa:	68db      	ldr	r3, [r3, #12]
 80006fc:	7979      	ldrb	r1, [r7, #5]
 80006fe:	79ba      	ldrb	r2, [r7, #6]
 8000700:	0052      	lsls	r2, r2, #1
 8000702:	fa01 f202 	lsl.w	r2, r1, r2
 8000706:	4611      	mov	r1, r2
 8000708:	4a0a      	ldr	r2, [pc, #40]	; (8000734 <MGPIO_voidSetPullState+0xec>)
 800070a:	430b      	orrs	r3, r1
 800070c:	60d3      	str	r3, [r2, #12]
 800070e:	e000      	b.n	8000712 <MGPIO_voidSetPullState+0xca>

	default :  /*Error*/   break ;
 8000710:	bf00      	nop
	}
}
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	40020000 	.word	0x40020000
 8000724:	40020400 	.word	0x40020400
 8000728:	40020800 	.word	0x40020800
 800072c:	40020c00 	.word	0x40020c00
 8000730:	40021000 	.word	0x40021000
 8000734:	40021c00 	.word	0x40021c00

08000738 <MGPIO_voidSetPinValue>:
	return LOC_u8PinValue ;
}


void MGPIO_voidSetPinValue(u8 Copy_u8PortName ,u8 Copy_u8PinNum, u8 Copy_u8PinValue)
{
 8000738:	b480      	push	{r7}
 800073a:	b083      	sub	sp, #12
 800073c:	af00      	add	r7, sp, #0
 800073e:	4603      	mov	r3, r0
 8000740:	71fb      	strb	r3, [r7, #7]
 8000742:	460b      	mov	r3, r1
 8000744:	71bb      	strb	r3, [r7, #6]
 8000746:	4613      	mov	r3, r2
 8000748:	717b      	strb	r3, [r7, #5]
	if(Copy_u8PinValue == MGPIO_HIGH)
 800074a:	797b      	ldrb	r3, [r7, #5]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d155      	bne.n	80007fc <MGPIO_voidSetPinValue+0xc4>
	{
		switch(Copy_u8PortName)
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b05      	cmp	r3, #5
 8000754:	f200 80ac 	bhi.w	80008b0 <MGPIO_voidSetPinValue+0x178>
 8000758:	a201      	add	r2, pc, #4	; (adr r2, 8000760 <MGPIO_voidSetPinValue+0x28>)
 800075a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800075e:	bf00      	nop
 8000760:	08000779 	.word	0x08000779
 8000764:	0800078f 	.word	0x0800078f
 8000768:	080007a5 	.word	0x080007a5
 800076c:	080007bb 	.word	0x080007bb
 8000770:	080007d1 	.word	0x080007d1
 8000774:	080007e7 	.word	0x080007e7
		{
		case MGPIOA_PORT : SET_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ;
 8000778:	4b52      	ldr	r3, [pc, #328]	; (80008c4 <MGPIO_voidSetPinValue+0x18c>)
 800077a:	695b      	ldr	r3, [r3, #20]
 800077c:	79ba      	ldrb	r2, [r7, #6]
 800077e:	2101      	movs	r1, #1
 8000780:	fa01 f202 	lsl.w	r2, r1, r2
 8000784:	4611      	mov	r1, r2
 8000786:	4a4f      	ldr	r2, [pc, #316]	; (80008c4 <MGPIO_voidSetPinValue+0x18c>)
 8000788:	430b      	orrs	r3, r1
 800078a:	6153      	str	r3, [r2, #20]
 800078c:	e093      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOB_PORT : SET_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ;
 800078e:	4b4e      	ldr	r3, [pc, #312]	; (80008c8 <MGPIO_voidSetPinValue+0x190>)
 8000790:	695b      	ldr	r3, [r3, #20]
 8000792:	79ba      	ldrb	r2, [r7, #6]
 8000794:	2101      	movs	r1, #1
 8000796:	fa01 f202 	lsl.w	r2, r1, r2
 800079a:	4611      	mov	r1, r2
 800079c:	4a4a      	ldr	r2, [pc, #296]	; (80008c8 <MGPIO_voidSetPinValue+0x190>)
 800079e:	430b      	orrs	r3, r1
 80007a0:	6153      	str	r3, [r2, #20]
 80007a2:	e088      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOC_PORT : SET_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 80007a4:	4b49      	ldr	r3, [pc, #292]	; (80008cc <MGPIO_voidSetPinValue+0x194>)
 80007a6:	695b      	ldr	r3, [r3, #20]
 80007a8:	79ba      	ldrb	r2, [r7, #6]
 80007aa:	2101      	movs	r1, #1
 80007ac:	fa01 f202 	lsl.w	r2, r1, r2
 80007b0:	4611      	mov	r1, r2
 80007b2:	4a46      	ldr	r2, [pc, #280]	; (80008cc <MGPIO_voidSetPinValue+0x194>)
 80007b4:	430b      	orrs	r3, r1
 80007b6:	6153      	str	r3, [r2, #20]
 80007b8:	e07d      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOD_PORT : SET_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ;
 80007ba:	4b45      	ldr	r3, [pc, #276]	; (80008d0 <MGPIO_voidSetPinValue+0x198>)
 80007bc:	695b      	ldr	r3, [r3, #20]
 80007be:	79ba      	ldrb	r2, [r7, #6]
 80007c0:	2101      	movs	r1, #1
 80007c2:	fa01 f202 	lsl.w	r2, r1, r2
 80007c6:	4611      	mov	r1, r2
 80007c8:	4a41      	ldr	r2, [pc, #260]	; (80008d0 <MGPIO_voidSetPinValue+0x198>)
 80007ca:	430b      	orrs	r3, r1
 80007cc:	6153      	str	r3, [r2, #20]
 80007ce:	e072      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOE_PORT : SET_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ;
 80007d0:	4b40      	ldr	r3, [pc, #256]	; (80008d4 <MGPIO_voidSetPinValue+0x19c>)
 80007d2:	695b      	ldr	r3, [r3, #20]
 80007d4:	79ba      	ldrb	r2, [r7, #6]
 80007d6:	2101      	movs	r1, #1
 80007d8:	fa01 f202 	lsl.w	r2, r1, r2
 80007dc:	4611      	mov	r1, r2
 80007de:	4a3d      	ldr	r2, [pc, #244]	; (80008d4 <MGPIO_voidSetPinValue+0x19c>)
 80007e0:	430b      	orrs	r3, r1
 80007e2:	6153      	str	r3, [r2, #20]
 80007e4:	e067      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOH_PORT : SET_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ;
 80007e6:	4b3c      	ldr	r3, [pc, #240]	; (80008d8 <MGPIO_voidSetPinValue+0x1a0>)
 80007e8:	695b      	ldr	r3, [r3, #20]
 80007ea:	79ba      	ldrb	r2, [r7, #6]
 80007ec:	2101      	movs	r1, #1
 80007ee:	fa01 f202 	lsl.w	r2, r1, r2
 80007f2:	4611      	mov	r1, r2
 80007f4:	4a38      	ldr	r2, [pc, #224]	; (80008d8 <MGPIO_voidSetPinValue+0x1a0>)
 80007f6:	430b      	orrs	r3, r1
 80007f8:	6153      	str	r3, [r2, #20]
 80007fa:	e05c      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
		}
	}
	else
	{
		switch(Copy_u8PortName)
 80007fc:	79fb      	ldrb	r3, [r7, #7]
 80007fe:	2b05      	cmp	r3, #5
 8000800:	d858      	bhi.n	80008b4 <MGPIO_voidSetPinValue+0x17c>
 8000802:	a201      	add	r2, pc, #4	; (adr r2, 8000808 <MGPIO_voidSetPinValue+0xd0>)
 8000804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000808:	08000821 	.word	0x08000821
 800080c:	08000839 	.word	0x08000839
 8000810:	08000851 	.word	0x08000851
 8000814:	08000869 	.word	0x08000869
 8000818:	08000881 	.word	0x08000881
 800081c:	08000899 	.word	0x08000899
		{
		case MGPIOA_PORT : CLR_BIT(MGPIOA->ODR,Copy_u8PinNum)  ; break ;
 8000820:	4b28      	ldr	r3, [pc, #160]	; (80008c4 <MGPIO_voidSetPinValue+0x18c>)
 8000822:	695b      	ldr	r3, [r3, #20]
 8000824:	79ba      	ldrb	r2, [r7, #6]
 8000826:	2101      	movs	r1, #1
 8000828:	fa01 f202 	lsl.w	r2, r1, r2
 800082c:	43d2      	mvns	r2, r2
 800082e:	4611      	mov	r1, r2
 8000830:	4a24      	ldr	r2, [pc, #144]	; (80008c4 <MGPIO_voidSetPinValue+0x18c>)
 8000832:	400b      	ands	r3, r1
 8000834:	6153      	str	r3, [r2, #20]
 8000836:	e03e      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOB_PORT : CLR_BIT(MGPIOB->ODR,Copy_u8PinNum)  ; break ;
 8000838:	4b23      	ldr	r3, [pc, #140]	; (80008c8 <MGPIO_voidSetPinValue+0x190>)
 800083a:	695b      	ldr	r3, [r3, #20]
 800083c:	79ba      	ldrb	r2, [r7, #6]
 800083e:	2101      	movs	r1, #1
 8000840:	fa01 f202 	lsl.w	r2, r1, r2
 8000844:	43d2      	mvns	r2, r2
 8000846:	4611      	mov	r1, r2
 8000848:	4a1f      	ldr	r2, [pc, #124]	; (80008c8 <MGPIO_voidSetPinValue+0x190>)
 800084a:	400b      	ands	r3, r1
 800084c:	6153      	str	r3, [r2, #20]
 800084e:	e032      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOC_PORT : CLR_BIT(MGPIOC->ODR,Copy_u8PinNum)  ; break ;
 8000850:	4b1e      	ldr	r3, [pc, #120]	; (80008cc <MGPIO_voidSetPinValue+0x194>)
 8000852:	695b      	ldr	r3, [r3, #20]
 8000854:	79ba      	ldrb	r2, [r7, #6]
 8000856:	2101      	movs	r1, #1
 8000858:	fa01 f202 	lsl.w	r2, r1, r2
 800085c:	43d2      	mvns	r2, r2
 800085e:	4611      	mov	r1, r2
 8000860:	4a1a      	ldr	r2, [pc, #104]	; (80008cc <MGPIO_voidSetPinValue+0x194>)
 8000862:	400b      	ands	r3, r1
 8000864:	6153      	str	r3, [r2, #20]
 8000866:	e026      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOD_PORT : CLR_BIT(MGPIOD->ODR,Copy_u8PinNum)  ; break ;
 8000868:	4b19      	ldr	r3, [pc, #100]	; (80008d0 <MGPIO_voidSetPinValue+0x198>)
 800086a:	695b      	ldr	r3, [r3, #20]
 800086c:	79ba      	ldrb	r2, [r7, #6]
 800086e:	2101      	movs	r1, #1
 8000870:	fa01 f202 	lsl.w	r2, r1, r2
 8000874:	43d2      	mvns	r2, r2
 8000876:	4611      	mov	r1, r2
 8000878:	4a15      	ldr	r2, [pc, #84]	; (80008d0 <MGPIO_voidSetPinValue+0x198>)
 800087a:	400b      	ands	r3, r1
 800087c:	6153      	str	r3, [r2, #20]
 800087e:	e01a      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOE_PORT : CLR_BIT(MGPIOE->ODR,Copy_u8PinNum)  ; break ;
 8000880:	4b14      	ldr	r3, [pc, #80]	; (80008d4 <MGPIO_voidSetPinValue+0x19c>)
 8000882:	695b      	ldr	r3, [r3, #20]
 8000884:	79ba      	ldrb	r2, [r7, #6]
 8000886:	2101      	movs	r1, #1
 8000888:	fa01 f202 	lsl.w	r2, r1, r2
 800088c:	43d2      	mvns	r2, r2
 800088e:	4611      	mov	r1, r2
 8000890:	4a10      	ldr	r2, [pc, #64]	; (80008d4 <MGPIO_voidSetPinValue+0x19c>)
 8000892:	400b      	ands	r3, r1
 8000894:	6153      	str	r3, [r2, #20]
 8000896:	e00e      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		case MGPIOH_PORT : CLR_BIT(MGPIOH->ODR,Copy_u8PinNum)  ; break ;
 8000898:	4b0f      	ldr	r3, [pc, #60]	; (80008d8 <MGPIO_voidSetPinValue+0x1a0>)
 800089a:	695b      	ldr	r3, [r3, #20]
 800089c:	79ba      	ldrb	r2, [r7, #6]
 800089e:	2101      	movs	r1, #1
 80008a0:	fa01 f202 	lsl.w	r2, r1, r2
 80008a4:	43d2      	mvns	r2, r2
 80008a6:	4611      	mov	r1, r2
 80008a8:	4a0b      	ldr	r2, [pc, #44]	; (80008d8 <MGPIO_voidSetPinValue+0x1a0>)
 80008aa:	400b      	ands	r3, r1
 80008ac:	6153      	str	r3, [r2, #20]
 80008ae:	e002      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
 80008b0:	bf00      	nop
 80008b2:	e000      	b.n	80008b6 <MGPIO_voidSetPinValue+0x17e>
		default :  /*Error*/   break ;
 80008b4:	bf00      	nop
		}
	}
}
 80008b6:	bf00      	nop
 80008b8:	370c      	adds	r7, #12
 80008ba:	46bd      	mov	sp, r7
 80008bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c0:	4770      	bx	lr
 80008c2:	bf00      	nop
 80008c4:	40020000 	.word	0x40020000
 80008c8:	40020400 	.word	0x40020400
 80008cc:	40020800 	.word	0x40020800
 80008d0:	40020c00 	.word	0x40020c00
 80008d4:	40021000 	.word	0x40021000
 80008d8:	40021c00 	.word	0x40021c00

080008dc <NVIC_voidEnableInterrupt>:
// enable interrupt no 60



void NVIC_voidEnableInterrupt (u8 Copy_u8IntNum)
{
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]

	NVIC->ISER[ Copy_u8IntNum /32] = (1 << (Copy_u8IntNum % 32)) ;
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	f003 031f 	and.w	r3, r3, #31
 80008ec:	2201      	movs	r2, #1
 80008ee:	fa02 f103 	lsl.w	r1, r2, r3
 80008f2:	4a06      	ldr	r2, [pc, #24]	; (800090c <NVIC_voidEnableInterrupt+0x30>)
 80008f4:	79fb      	ldrb	r3, [r7, #7]
 80008f6:	095b      	lsrs	r3, r3, #5
 80008f8:	b2db      	uxtb	r3, r3
 80008fa:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
}
 80008fe:	bf00      	nop
 8000900:	370c      	adds	r7, #12
 8000902:	46bd      	mov	sp, r7
 8000904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000908:	4770      	bx	lr
 800090a:	bf00      	nop
 800090c:	e000e100 	.word	0xe000e100

08000910 <MRCC_voidEnablePeripheralClock>:
   @param[in]   Copy_uddtBusName  : The Bus of The Peripheral [AHB1 , AHB2 , APB1 ,APB2] Every one  Detect 
   Which REG to Choise Peripherial From It   
   @param[in]   Copy_u8PerNum  : The order of Peripheral On The Selected Register
*/
void MRCC_voidEnablePeripheralClock(BusName_t Copy_uddtBusName,u8 Copy_u8PerNum)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	4603      	mov	r3, r0
 8000918:	460a      	mov	r2, r1
 800091a:	71fb      	strb	r3, [r7, #7]
 800091c:	4613      	mov	r3, r2
 800091e:	71bb      	strb	r3, [r7, #6]
	switch(Copy_uddtBusName)
 8000920:	79fb      	ldrb	r3, [r7, #7]
 8000922:	2b03      	cmp	r3, #3
 8000924:	d836      	bhi.n	8000994 <MRCC_voidEnablePeripheralClock+0x84>
 8000926:	a201      	add	r2, pc, #4	; (adr r2, 800092c <MRCC_voidEnablePeripheralClock+0x1c>)
 8000928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800092c:	0800093d 	.word	0x0800093d
 8000930:	08000953 	.word	0x08000953
 8000934:	08000969 	.word	0x08000969
 8000938:	0800097f 	.word	0x0800097f
	{  
     case AHB1  : SET_BIT(RCC->AHB1ENR,Copy_u8PerNum) ; break ;
 800093c:	4b19      	ldr	r3, [pc, #100]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 800093e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000940:	79ba      	ldrb	r2, [r7, #6]
 8000942:	2101      	movs	r1, #1
 8000944:	fa01 f202 	lsl.w	r2, r1, r2
 8000948:	4611      	mov	r1, r2
 800094a:	4a16      	ldr	r2, [pc, #88]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 800094c:	430b      	orrs	r3, r1
 800094e:	6313      	str	r3, [r2, #48]	; 0x30
 8000950:	e021      	b.n	8000996 <MRCC_voidEnablePeripheralClock+0x86>
     case AHB2  : SET_BIT(RCC->AHB2ENR,Copy_u8PerNum) ; break ;
 8000952:	4b14      	ldr	r3, [pc, #80]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 8000954:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000956:	79ba      	ldrb	r2, [r7, #6]
 8000958:	2101      	movs	r1, #1
 800095a:	fa01 f202 	lsl.w	r2, r1, r2
 800095e:	4611      	mov	r1, r2
 8000960:	4a10      	ldr	r2, [pc, #64]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 8000962:	430b      	orrs	r3, r1
 8000964:	6353      	str	r3, [r2, #52]	; 0x34
 8000966:	e016      	b.n	8000996 <MRCC_voidEnablePeripheralClock+0x86>
     case APB1  : SET_BIT(RCC->APB1ENR,Copy_u8PerNum) ; break ;
 8000968:	4b0e      	ldr	r3, [pc, #56]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 800096a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800096c:	79ba      	ldrb	r2, [r7, #6]
 800096e:	2101      	movs	r1, #1
 8000970:	fa01 f202 	lsl.w	r2, r1, r2
 8000974:	4611      	mov	r1, r2
 8000976:	4a0b      	ldr	r2, [pc, #44]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 8000978:	430b      	orrs	r3, r1
 800097a:	6413      	str	r3, [r2, #64]	; 0x40
 800097c:	e00b      	b.n	8000996 <MRCC_voidEnablePeripheralClock+0x86>
     case APB2  : SET_BIT(RCC->APB2ENR,Copy_u8PerNum) ; break ;
 800097e:	4b09      	ldr	r3, [pc, #36]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 8000980:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000982:	79ba      	ldrb	r2, [r7, #6]
 8000984:	2101      	movs	r1, #1
 8000986:	fa01 f202 	lsl.w	r2, r1, r2
 800098a:	4611      	mov	r1, r2
 800098c:	4a05      	ldr	r2, [pc, #20]	; (80009a4 <MRCC_voidEnablePeripheralClock+0x94>)
 800098e:	430b      	orrs	r3, r1
 8000990:	6453      	str	r3, [r2, #68]	; 0x44
 8000992:	e000      	b.n	8000996 <MRCC_voidEnablePeripheralClock+0x86>
	 default    : /* ERROR*/         break ; 
 8000994:	bf00      	nop
	}
	
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a0:	4770      	bx	lr
 80009a2:	bf00      	nop
 80009a4:	40023800 	.word	0x40023800

080009a8 <MRCC_voidInitSystemClk>:
/*
   @fu MRCC_voidInitSystemClk 
   @brief   This Function used To Initializaion for System clock   
*/
void MRCC_voidInitSystemClk(void)
{   
 80009a8:	b480      	push	{r7}
 80009aa:	af00      	add	r7, sp, #0
    /***************HSI************/
	#if MRCC_CLKSRC == HSI
	/*1- Enable HSI */
	SET_BIT(RCC->CR,0U);
 80009ac:	4b0b      	ldr	r3, [pc, #44]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a0a      	ldr	r2, [pc, #40]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009b2:	f043 0301 	orr.w	r3, r3, #1
 80009b6:	6013      	str	r3, [r2, #0]
	/*2-Clk System -->HSI */
	CLR_BIT(RCC->CFGR,0U);
 80009b8:	4b08      	ldr	r3, [pc, #32]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009ba:	689b      	ldr	r3, [r3, #8]
 80009bc:	4a07      	ldr	r2, [pc, #28]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009be:	f023 0301 	bic.w	r3, r3, #1
 80009c2:	6093      	str	r3, [r2, #8]
	CLR_BIT(RCC->CFGR,1U);
 80009c4:	4b05      	ldr	r3, [pc, #20]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009c6:	689b      	ldr	r3, [r3, #8]
 80009c8:	4a04      	ldr	r2, [pc, #16]	; (80009dc <MRCC_voidInitSystemClk+0x34>)
 80009ca:	f023 0302 	bic.w	r3, r3, #2
 80009ce:	6093      	str	r3, [r2, #8]
      #error "Invalid Option For Clock Source  ..... " 		
	#endif
/*#####################################################################*/
/*                  THE END OF PROGRAM FILE                      */
/*#####################################################################*/
}
 80009d0:	bf00      	nop
 80009d2:	46bd      	mov	sp, r7
 80009d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d8:	4770      	bx	lr
 80009da:	bf00      	nop
 80009dc:	40023800 	.word	0x40023800

080009e0 <STK_voidInit>:

static u8 Global_u8IntervalMode = 0;


void STK_voidInit( void )
{
 80009e0:	b480      	push	{r7}
 80009e2:	af00      	add	r7, sp, #0

	// Choose the input CLK source.
#if CLK_SOURCE == AHB_DividedBy8

	CLR_BIT( SYSTICK->STK_CTRL, 2 ) ;
 80009e4:	4b05      	ldr	r3, [pc, #20]	; (80009fc <STK_voidInit+0x1c>)
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	4a04      	ldr	r2, [pc, #16]	; (80009fc <STK_voidInit+0x1c>)
 80009ea:	f023 0304 	bic.w	r3, r3, #4
 80009ee:	6013      	str	r3, [r2, #0]
#elif CLK_SOURCE == AHB

	SET_BIT( SYSTICK->STK_CTRL, 2 ) ;

#endif
}
 80009f0:	bf00      	nop
 80009f2:	46bd      	mov	sp, r7
 80009f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009f8:	4770      	bx	lr
 80009fa:	bf00      	nop
 80009fc:	e000e010 	.word	0xe000e010

08000a00 <STK_voidDisableTimerAndClear>:


}

void STK_voidDisableTimerAndClear(void)
{
 8000a00:	b480      	push	{r7}
 8000a02:	af00      	add	r7, sp, #0
	/*Disable timer because timer if call again must start again */
	// Stop the timer.
	CLR_BIT( SYSTICK->STK_CTRL, 0 ) ;
 8000a04:	4b06      	ldr	r3, [pc, #24]	; (8000a20 <STK_voidDisableTimerAndClear+0x20>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a05      	ldr	r2, [pc, #20]	; (8000a20 <STK_voidDisableTimerAndClear+0x20>)
 8000a0a:	f023 0301 	bic.w	r3, r3, #1
 8000a0e:	6013      	str	r3, [r2, #0]
	// Load Ticks to the load register.
	SYSTICK->STK_VAL = 0 ;
 8000a10:	4b03      	ldr	r3, [pc, #12]	; (8000a20 <STK_voidDisableTimerAndClear+0x20>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	609a      	str	r2, [r3, #8]

}
 8000a16:	bf00      	nop
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a1e:	4770      	bx	lr
 8000a20:	e000e010 	.word	0xe000e010

08000a24 <STK_voidSetSingleInterval>:
void STK_voidSetSingleInterval( u32 Copy_u32Ticks)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b083      	sub	sp, #12
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]

	// Set interval mode to single.
	Global_u8IntervalMode = SINGLE_INTERVAL_MODE ;
 8000a2c:	4b0b      	ldr	r3, [pc, #44]	; (8000a5c <STK_voidSetSingleInterval+0x38>)
 8000a2e:	2201      	movs	r2, #1
 8000a30:	701a      	strb	r2, [r3, #0]

	// Load Ticks to the load register.
	SYSTICK->STK_LOAD = Copy_u32Ticks ;
 8000a32:	4a0b      	ldr	r2, [pc, #44]	; (8000a60 <STK_voidSetSingleInterval+0x3c>)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	6053      	str	r3, [r2, #4]

	// Enable the Interrupt.
	SET_BIT( SYSTICK->STK_CTRL, 1 ) ;
 8000a38:	4b09      	ldr	r3, [pc, #36]	; (8000a60 <STK_voidSetSingleInterval+0x3c>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4a08      	ldr	r2, [pc, #32]	; (8000a60 <STK_voidSetSingleInterval+0x3c>)
 8000a3e:	f043 0302 	orr.w	r3, r3, #2
 8000a42:	6013      	str	r3, [r2, #0]

	// Start Timer.
	SET_BIT( SYSTICK->STK_CTRL, 0 ) ;
 8000a44:	4b06      	ldr	r3, [pc, #24]	; (8000a60 <STK_voidSetSingleInterval+0x3c>)
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	4a05      	ldr	r2, [pc, #20]	; (8000a60 <STK_voidSetSingleInterval+0x3c>)
 8000a4a:	f043 0301 	orr.w	r3, r3, #1
 8000a4e:	6013      	str	r3, [r2, #0]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a5a:	4770      	bx	lr
 8000a5c:	200000b4 	.word	0x200000b4
 8000a60:	e000e010 	.word	0xe000e010

08000a64 <STK_u32GetElapsedTime>:
	SYSTICK->STK_LOAD = 0 ;
	SYSTICK->STK_VAL  = 0 ;
}

u32 STK_u32GetElapsedTime( void )
{
 8000a64:	b480      	push	{r7}
 8000a66:	b083      	sub	sp, #12
 8000a68:	af00      	add	r7, sp, #0

	u32 Local_u32ElapsedTime = 0 ;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	607b      	str	r3, [r7, #4]

	Local_u32ElapsedTime = (SYSTICK->STK_LOAD - SYSTICK->STK_VAL) ;
 8000a6e:	4b06      	ldr	r3, [pc, #24]	; (8000a88 <STK_u32GetElapsedTime+0x24>)
 8000a70:	685a      	ldr	r2, [r3, #4]
 8000a72:	4b05      	ldr	r3, [pc, #20]	; (8000a88 <STK_u32GetElapsedTime+0x24>)
 8000a74:	689b      	ldr	r3, [r3, #8]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	607b      	str	r3, [r7, #4]

	return Local_u32ElapsedTime ;
 8000a7a:	687b      	ldr	r3, [r7, #4]
}
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	370c      	adds	r7, #12
 8000a80:	46bd      	mov	sp, r7
 8000a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a86:	4770      	bx	lr
 8000a88:	e000e010 	.word	0xe000e010

08000a8c <STK_voidSetCallBackRegisteration>:
	// Disable the peripheral interrupt.
	CLR_BIT( SYSTICK->STK_CTRL, 1 ) ;
}

void STK_voidSetCallBackRegisteration( void (*ptr)(void) )
{
 8000a8c:	b480      	push	{r7}
 8000a8e:	b083      	sub	sp, #12
 8000a90:	af00      	add	r7, sp, #0
 8000a92:	6078      	str	r0, [r7, #4]
	CallbackFunc = ptr;
 8000a94:	4a04      	ldr	r2, [pc, #16]	; (8000aa8 <STK_voidSetCallBackRegisteration+0x1c>)
 8000a96:	687b      	ldr	r3, [r7, #4]
 8000a98:	6013      	str	r3, [r2, #0]
}
 8000a9a:	bf00      	nop
 8000a9c:	370c      	adds	r7, #12
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop
 8000aa8:	200000b0 	.word	0x200000b0

08000aac <SysTick_Handler>:

void SysTick_Handler(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	// Callback notification.
	CallbackFunc( ) ;
 8000ab0:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <SysTick_Handler+0x48>)
 8000ab2:	681b      	ldr	r3, [r3, #0]
 8000ab4:	4798      	blx	r3

	if( Global_u8IntervalMode == SINGLE_INTERVAL_MODE )
 8000ab6:	4b10      	ldr	r3, [pc, #64]	; (8000af8 <SysTick_Handler+0x4c>)
 8000ab8:	781b      	ldrb	r3, [r3, #0]
 8000aba:	2b01      	cmp	r3, #1
 8000abc:	d111      	bne.n	8000ae2 <SysTick_Handler+0x36>
	{

		// Disable the IRQ.
		CLR_BIT( SYSTICK->STK_CTRL, 1 ) ;
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <SysTick_Handler+0x50>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4a0e      	ldr	r2, [pc, #56]	; (8000afc <SysTick_Handler+0x50>)
 8000ac4:	f023 0302 	bic.w	r3, r3, #2
 8000ac8:	6013      	str	r3, [r2, #0]

		// Stop the timer.
		CLR_BIT( SYSTICK->STK_CTRL, 0 ) ;
 8000aca:	4b0c      	ldr	r3, [pc, #48]	; (8000afc <SysTick_Handler+0x50>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <SysTick_Handler+0x50>)
 8000ad0:	f023 0301 	bic.w	r3, r3, #1
 8000ad4:	6013      	str	r3, [r2, #0]

		// Clear the LOAD and VAL registers
		SYSTICK->STK_LOAD = 0 ;
 8000ad6:	4b09      	ldr	r3, [pc, #36]	; (8000afc <SysTick_Handler+0x50>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	605a      	str	r2, [r3, #4]
		SYSTICK->STK_VAL  = 0 ;
 8000adc:	4b07      	ldr	r3, [pc, #28]	; (8000afc <SysTick_Handler+0x50>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	609a      	str	r2, [r3, #8]
	}

	/*Clear Flag*/
	SET_BIT( SYSTICK->STK_CTRL , 16 );
 8000ae2:	4b06      	ldr	r3, [pc, #24]	; (8000afc <SysTick_Handler+0x50>)
 8000ae4:	681b      	ldr	r3, [r3, #0]
 8000ae6:	4a05      	ldr	r2, [pc, #20]	; (8000afc <SysTick_Handler+0x50>)
 8000ae8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000aec:	6013      	str	r3, [r2, #0]

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	200000b0 	.word	0x200000b0
 8000af8:	200000b4 	.word	0x200000b4
 8000afc:	e000e010 	.word	0xe000e010

08000b00 <main>:
extern u8 Global_u8DataStorgeFrame;

void IR_voidAppPlay(void);

int main(void)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	af00      	add	r7, sp, #0
	/*Enable clock System*/
	MRCC_voidInitSystemClk();
 8000b04:	f7ff ff50 	bl	80009a8 <MRCC_voidInitSystemClk>

	IR_voidInit();
 8000b08:	f7ff fc4a 	bl	80003a0 <IR_voidInit>

	IR_voidSetCallBack(&IR_voidAppPlay);
 8000b0c:	4809      	ldr	r0, [pc, #36]	; (8000b34 <main+0x34>)
 8000b0e:	f7ff fd13 	bl	8000538 <IR_voidSetCallBack>

	/*LED Config is low if interrupt is high */
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN1, MGPIO_MODE_OUTPUT);
 8000b12:	2201      	movs	r2, #1
 8000b14:	2101      	movs	r1, #1
 8000b16:	2000      	movs	r0, #0
 8000b18:	f7ff fd1e 	bl	8000558 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN2, MGPIO_MODE_OUTPUT);
 8000b1c:	2201      	movs	r2, #1
 8000b1e:	2102      	movs	r1, #2
 8000b20:	2000      	movs	r0, #0
 8000b22:	f7ff fd19 	bl	8000558 <MGPIO_voidSetPinMode>
	MGPIO_voidSetPinMode(MGPIOA_PORT, MGPIO_PIN3, MGPIO_MODE_OUTPUT);
 8000b26:	2201      	movs	r2, #1
 8000b28:	2103      	movs	r1, #3
 8000b2a:	2000      	movs	r0, #0
 8000b2c:	f7ff fd14 	bl	8000558 <MGPIO_voidSetPinMode>


	/* Loop forever */
	for(;;);
 8000b30:	e7fe      	b.n	8000b30 <main+0x30>
 8000b32:	bf00      	nop
 8000b34:	08000b39 	.word	0x08000b39

08000b38 <IR_voidAppPlay>:
}


void IR_voidAppPlay (void)
{
 8000b38:	b580      	push	{r7, lr}
 8000b3a:	af00      	add	r7, sp, #0
	/*Turn on the Red LED*/
	if (Global_u8DataStorgeFrame == IR_NUMBER_1)
 8000b3c:	4b32      	ldr	r3, [pc, #200]	; (8000c08 <IR_voidAppPlay+0xd0>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	2b0c      	cmp	r3, #12
 8000b42:	d10f      	bne.n	8000b64 <IR_voidAppPlay+0x2c>
	{
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_HIGH);
 8000b44:	2201      	movs	r2, #1
 8000b46:	2101      	movs	r1, #1
 8000b48:	2000      	movs	r0, #0
 8000b4a:	f7ff fdf5 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_LOW);
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2102      	movs	r1, #2
 8000b52:	2000      	movs	r0, #0
 8000b54:	f7ff fdf0 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_LOW);
 8000b58:	2200      	movs	r2, #0
 8000b5a:	2103      	movs	r1, #3
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	f7ff fdeb 	bl	8000738 <MGPIO_voidSetPinValue>
	{
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_LOW);
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_LOW);
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_LOW);
	}
}
 8000b62:	e04e      	b.n	8000c02 <IR_voidAppPlay+0xca>
	else if (Global_u8DataStorgeFrame == IR_NUMBER_2)
 8000b64:	4b28      	ldr	r3, [pc, #160]	; (8000c08 <IR_voidAppPlay+0xd0>)
 8000b66:	781b      	ldrb	r3, [r3, #0]
 8000b68:	2b18      	cmp	r3, #24
 8000b6a:	d10f      	bne.n	8000b8c <IR_voidAppPlay+0x54>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_HIGH);
 8000b6c:	2201      	movs	r2, #1
 8000b6e:	2102      	movs	r1, #2
 8000b70:	2000      	movs	r0, #0
 8000b72:	f7ff fde1 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_LOW);
 8000b76:	2200      	movs	r2, #0
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2000      	movs	r0, #0
 8000b7c:	f7ff fddc 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_LOW);
 8000b80:	2200      	movs	r2, #0
 8000b82:	2103      	movs	r1, #3
 8000b84:	2000      	movs	r0, #0
 8000b86:	f7ff fdd7 	bl	8000738 <MGPIO_voidSetPinValue>
}
 8000b8a:	e03a      	b.n	8000c02 <IR_voidAppPlay+0xca>
	else if (Global_u8DataStorgeFrame == IR_NUMBER_3)
 8000b8c:	4b1e      	ldr	r3, [pc, #120]	; (8000c08 <IR_voidAppPlay+0xd0>)
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	2b5e      	cmp	r3, #94	; 0x5e
 8000b92:	d10f      	bne.n	8000bb4 <IR_voidAppPlay+0x7c>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_HIGH);
 8000b94:	2201      	movs	r2, #1
 8000b96:	2103      	movs	r1, #3
 8000b98:	2000      	movs	r0, #0
 8000b9a:	f7ff fdcd 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_LOW);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	2101      	movs	r1, #1
 8000ba2:	2000      	movs	r0, #0
 8000ba4:	f7ff fdc8 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_LOW);
 8000ba8:	2200      	movs	r2, #0
 8000baa:	2102      	movs	r1, #2
 8000bac:	2000      	movs	r0, #0
 8000bae:	f7ff fdc3 	bl	8000738 <MGPIO_voidSetPinValue>
}
 8000bb2:	e026      	b.n	8000c02 <IR_voidAppPlay+0xca>
	else if (Global_u8DataStorgeFrame == IR_NUMBER_4)
 8000bb4:	4b14      	ldr	r3, [pc, #80]	; (8000c08 <IR_voidAppPlay+0xd0>)
 8000bb6:	781b      	ldrb	r3, [r3, #0]
 8000bb8:	2b08      	cmp	r3, #8
 8000bba:	d10f      	bne.n	8000bdc <IR_voidAppPlay+0xa4>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_HIGH);
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	2103      	movs	r1, #3
 8000bc0:	2000      	movs	r0, #0
 8000bc2:	f7ff fdb9 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_HIGH);
 8000bc6:	2201      	movs	r2, #1
 8000bc8:	2101      	movs	r1, #1
 8000bca:	2000      	movs	r0, #0
 8000bcc:	f7ff fdb4 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_LOW);
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	2102      	movs	r1, #2
 8000bd4:	2000      	movs	r0, #0
 8000bd6:	f7ff fdaf 	bl	8000738 <MGPIO_voidSetPinValue>
}
 8000bda:	e012      	b.n	8000c02 <IR_voidAppPlay+0xca>
	else if (Global_u8DataStorgeFrame == IR_OFF)
 8000bdc:	4b0a      	ldr	r3, [pc, #40]	; (8000c08 <IR_voidAppPlay+0xd0>)
 8000bde:	781b      	ldrb	r3, [r3, #0]
 8000be0:	2b45      	cmp	r3, #69	; 0x45
 8000be2:	d10e      	bne.n	8000c02 <IR_voidAppPlay+0xca>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN3, MGPIO_LOW);
 8000be4:	2200      	movs	r2, #0
 8000be6:	2103      	movs	r1, #3
 8000be8:	2000      	movs	r0, #0
 8000bea:	f7ff fda5 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN1, MGPIO_LOW);
 8000bee:	2200      	movs	r2, #0
 8000bf0:	2101      	movs	r1, #1
 8000bf2:	2000      	movs	r0, #0
 8000bf4:	f7ff fda0 	bl	8000738 <MGPIO_voidSetPinValue>
		MGPIO_voidSetPinValue(MGPIOA_PORT, MGPIO_PIN2, MGPIO_LOW);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	2102      	movs	r1, #2
 8000bfc:	2000      	movs	r0, #0
 8000bfe:	f7ff fd9b 	bl	8000738 <MGPIO_voidSetPinValue>
}
 8000c02:	bf00      	nop
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200000ad 	.word	0x200000ad

08000c0c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000c0c:	480d      	ldr	r0, [pc, #52]	; (8000c44 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000c0e:	4685      	mov	sp, r0
/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000c10:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000c14:	480c      	ldr	r0, [pc, #48]	; (8000c48 <LoopForever+0x6>)
  ldr r1, =_edata
 8000c16:	490d      	ldr	r1, [pc, #52]	; (8000c4c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <LoopForever+0xe>)
  movs r3, #0
 8000c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c1c:	e002      	b.n	8000c24 <LoopCopyDataInit>

08000c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c22:	3304      	adds	r3, #4

08000c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c28:	d3f9      	bcc.n	8000c1e <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c2a:	4a0a      	ldr	r2, [pc, #40]	; (8000c54 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000c2c:	4c0a      	ldr	r4, [pc, #40]	; (8000c58 <LoopForever+0x16>)
  movs r3, #0
 8000c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c30:	e001      	b.n	8000c36 <LoopFillZerobss>

08000c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c34:	3204      	adds	r2, #4

08000c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c38:	d3fb      	bcc.n	8000c32 <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000c3a:	f000 f811 	bl	8000c60 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000c3e:	f7ff ff5f 	bl	8000b00 <main>

08000c42 <LoopForever>:

LoopForever:
    b LoopForever
 8000c42:	e7fe      	b.n	8000c42 <LoopForever>
  ldr   r0, =_estack
 8000c44:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c4c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000c50:	08000cc8 	.word	0x08000cc8
  ldr r2, =_sbss
 8000c54:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000c58:	200000b8 	.word	0x200000b8

08000c5c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000c5c:	e7fe      	b.n	8000c5c <ADC_IRQHandler>
	...

08000c60 <__libc_init_array>:
 8000c60:	b570      	push	{r4, r5, r6, lr}
 8000c62:	4d0d      	ldr	r5, [pc, #52]	; (8000c98 <__libc_init_array+0x38>)
 8000c64:	4c0d      	ldr	r4, [pc, #52]	; (8000c9c <__libc_init_array+0x3c>)
 8000c66:	1b64      	subs	r4, r4, r5
 8000c68:	10a4      	asrs	r4, r4, #2
 8000c6a:	2600      	movs	r6, #0
 8000c6c:	42a6      	cmp	r6, r4
 8000c6e:	d109      	bne.n	8000c84 <__libc_init_array+0x24>
 8000c70:	4d0b      	ldr	r5, [pc, #44]	; (8000ca0 <__libc_init_array+0x40>)
 8000c72:	4c0c      	ldr	r4, [pc, #48]	; (8000ca4 <__libc_init_array+0x44>)
 8000c74:	f000 f818 	bl	8000ca8 <_init>
 8000c78:	1b64      	subs	r4, r4, r5
 8000c7a:	10a4      	asrs	r4, r4, #2
 8000c7c:	2600      	movs	r6, #0
 8000c7e:	42a6      	cmp	r6, r4
 8000c80:	d105      	bne.n	8000c8e <__libc_init_array+0x2e>
 8000c82:	bd70      	pop	{r4, r5, r6, pc}
 8000c84:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c88:	4798      	blx	r3
 8000c8a:	3601      	adds	r6, #1
 8000c8c:	e7ee      	b.n	8000c6c <__libc_init_array+0xc>
 8000c8e:	f855 3b04 	ldr.w	r3, [r5], #4
 8000c92:	4798      	blx	r3
 8000c94:	3601      	adds	r6, #1
 8000c96:	e7f2      	b.n	8000c7e <__libc_init_array+0x1e>
 8000c98:	08000cc0 	.word	0x08000cc0
 8000c9c:	08000cc0 	.word	0x08000cc0
 8000ca0:	08000cc0 	.word	0x08000cc0
 8000ca4:	08000cc4 	.word	0x08000cc4

08000ca8 <_init>:
 8000ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000caa:	bf00      	nop
 8000cac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cae:	bc08      	pop	{r3}
 8000cb0:	469e      	mov	lr, r3
 8000cb2:	4770      	bx	lr

08000cb4 <_fini>:
 8000cb4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000cb6:	bf00      	nop
 8000cb8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000cba:	bc08      	pop	{r3}
 8000cbc:	469e      	mov	lr, r3
 8000cbe:	4770      	bx	lr
